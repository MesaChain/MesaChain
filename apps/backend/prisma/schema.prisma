// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  USER
}

enum Network {
  testnet
  mainnet
}

enum Status {
  pending
  confirmed
  failed
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id            String           @id @default(uuid())
  email         String           @unique
  name          String?
  role          UserRole         @default(STAFF)
  password      String
  active        Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  wallets       StellarWallet[]
  session       Session[]
  refreshTokens RefreshToken[]
  reservations  Reservation[]
}

model StellarWallet {
  id          String         @id @default(uuid())
  userId      String         @map("user_id")
  publicKey   String         @unique @map("public_key")
  network     Network
  createdAt   DateTime       @default(now()) @map("created_at")
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
}

model Transaction {
  id             String        @id @default(uuid())
  walletId       String        @map("wallet_id")
  stellarTxHash  String        @unique @map("stellar_tx_hash")
  amount         Decimal       @db.Decimal(20, 7)
  assetCode      String        @map("asset_code")
  status         Status
  createdAt      DateTime      @default(now()) @map("created_at")

  wallet         StellarWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Table {
  id           String         @id @default(uuid())
  name         String         @unique
  capacity     Int
  location     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  reservations Reservation[]
}

model Reservation {
  id         String             @id @default(uuid())
  userId     String
  tableId    String
  startTime  DateTime
  endTime    DateTime
  partySize  Int
  status     ReservationStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  user       User              @relation(fields: [userId], references: [id])
  table      Table             @relation(fields: [tableId], references: [id])

  @@unique([tableId, startTime, endTime])
  @@index([userId])
  @@index([tableId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
